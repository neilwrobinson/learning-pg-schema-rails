#!/usr/bin/env ruby
require "optparse"


def setup
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  log "Dropping & recreating the development database"
  # Note that the very first time this runs, db:reset
  # will fail, but this failure is fixed by
  # doing a db:migrate
  system! "bin/rails db:reset || bin/rails db:migrate"


  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  puts "\n== Restarting application server =="
  system! "bin/rails restart"

  log "All set up."
  log ""
  log "To see commonly-needed commands, run:"
  log ""
  log "    bin/setup help"
  log ""
  log "    bin/run"
  log "       # run app locally"
  log ""
  log "    LOGRAGE_IN_DEVELOPMENT=true bin/run"
  log "       # run app locally using"
  log "       # production-like logging"
  log ""
end

def help
  puts "Usage: #{$0}"
  puts ""
  puts "Installs gems, recreates dev database, and generally"
  puts "prepares the app to be run locally"
  puts ""
  puts "Other useful commands:"
  puts ""
  puts "  bin/run"
  puts "     # run app locally"
  puts ""
  puts "  LOGRAGE_IN_DEVELOPMENT=true bin/run"
  puts "     # run app locally using"
  puts "     # production-like logging"
  puts ""
  puts "  bin/ci"
  puts "     # runs all tests and checks as CI would"
  puts ""
  puts "  bin/rails test"
  puts "     # run non-system tests"
  puts ""
  puts "  bin/rails test:system"
  puts "     # run system tests"
  puts ""
  puts "  bin/db-migrate"
  puts "     # migrate database"
  puts ""
  puts "  bin/db-rollback"
  puts "     # rollback database"
  puts ""
  puts "  bin/psql"
  puts "     # connect to database"
  puts ""
  puts "  bin/setup help"
  puts "     # show this help"
  puts ""
end

# start of helpers

# We don't want the setup method to have to do all this error
# checking, and we also want to explicitly log what we are
# executing. Thus, we use this method instead of Kernel#system
def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

# It's helpful to know what messages came from this
# script, so we'll use log instead of `puts`
def log(message)
  puts "[ bin/setup ] #{message}"
end


OptionParser.new do |parser|
  parser.on("-h", "--help") do
    help
    exit
  end
end.parse!

if ARGV[0] == "help"
  help
elsif !ARGV[0].nil?
  puts "Unknown argument: '#{ARGV[0]}'"
  exit 1
else
  setup
end